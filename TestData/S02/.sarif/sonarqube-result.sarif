{
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SonarQube",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "informationUri": "http://localhost:5050/coding_rules",
          "rules": [
            {
              "id": "csharpsquid:S2077",
              "shortDescription": {
                "text": "Formatting SQL queries is security-sensitive"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "text": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\">parameterized queries, prepared\n  statements, or stored procedures</a> and bind variables to SQL query parameters. </li>\n  <li> Consider using ORM frameworks if there is a need to have an abstract layer to access data. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\npublic void Foo(DbContext context, string query, string param)\n{\n    context.Database.ExecuteSqlCommand(\"SELECT * FROM mytable WHERE mycol=@p0\", param); // Compliant, it's a parametrized safe query\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/89\">CWE-89 - Improper Neutralization of Special Elements used in an SQL Command</a> </li>\n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>"
              },
              "properties": {
                "tags": [
                  "cwe",
                  "bad-practice",
                  "sql"
                ],
                "categories": [
                  "SECURITY_HOTSPOT"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "csharpsquid:S2077",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Make sure using a dynamically formatted SQL query is safe here."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "solutionDir"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "startColumn": 4,
                  "endColumn": 19
                }
              }
            }
          ]
        }
      ]
    }
  ]
}