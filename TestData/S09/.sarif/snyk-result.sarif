{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "csharp/AntiforgeryTokenDisabled",
              "name": "AntiforgeryTokenDisabled",
              "shortDescription": {
                "text": "Anti-forgery token validation disabled"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\nExample:\n\n```\npublic class StudentController\n{\n\t    [HttpPost()]\n        [IgnoreAntiforgeryToken(Order = 1000)]\n        public Task<object> SendForm()\n        {\n                ...\n        }\n}\n```\n\n\n## Best practices for prevention\n* In ASP.NET MVC controllers, enable anti-forgery token validation by adding the `[ValidateAntiForgeryToken]` attribute to all actions that change the state of the server.\n\n* Anti-forgery token validation is enabled by default in Razor Pages. This validation can be disabled either globally or on individual pages by using the  `[IgnoreAntiforgeryToken]`. Disabling this feature is not recommended and can allow for CSRF attacks on methods that might be performing sensitive user actions.\n\n\n## References\n* [Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-5.0)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "AntiforgeryTokenDisabled",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Dynatrace/superdump/commit/cd5f0b7190d41aafc53f95974b63b5e2e99a1a26?diff=split#diff-be2476dfaf7611f947a0efff2eac019574e91edcaf691f35276d46ee11edac8cL-1",
                    "lines": [
                      {
                        "line": "\t[AutoValidateAntiforgeryToken]\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tpublic class LoginController : Controller {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprivate readonly LdapAuthentcationService authentificationHelper;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprivate readonly ILogger logger;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpublic LoginController(LdapAuthentcationService authentificationHelper, ILoggerFactory loggerFactory) {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tthis.authentificationHelper = authentificationHelper;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tlogger = loggerFactory.CreateLogger<LoginController>();\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpublic IActionResult Index() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn View(\"Login\", new LoginViewModel { ReturnUrl = Request.Query[\"ReturnUrl\"].FirstOrDefault() ?? \"/Home/Index\" });\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t[HttpPost]\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/damienbod/AspNetCoreMvcAngular/commit/fba1c6dc595134bdefc9aa2ffb0764ee29d7f1be?diff=split#diff-c8f5e654c5707f3bb49bd646232b379408572dcd345d3929f595bc037bec7c28L-1",
                    "lines": [
                      {
                        "line": "[HttpPost]\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "[Route(\"\")]\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "//[ValidateAntiForgeryToken]\r\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "[ValidateAntiForgeryToken]\r\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SOFTINUX/Base/commit/e1580f565b03b4e44bb2e7d1faeceec36e58fcfa?diff=split#diff-1e5a17815941ead6a9e0f7a3a453b32809e3dcafbfc055036a161f016cb01e45L-1",
                    "lines": [
                      {
                        "line": "[HttpPost]\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "//[ExportModelStateToTempData]\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "[AllowAnonymous]\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "[ValidateAntiForgeryToken]\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 35,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "csharp/BinaryFormatterUsage",
              "name": "BinaryFormatterUsage",
              "shortDescription": {
                "text": "Usage of BinaryFormatter"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nMicrosoft warns that using the BinaryFormatter is considered obsolete, and alternative methods of serialisation should be used instead. This is due to the fact that the BinaryFormatter is insecure and can't be made secure.\n\n## References\n\n* [Deserialization risks in use of BinaryFormatter and related types](https://aka.ms/binaryformatter)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "BinaryFormatterUsage",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-502"
                ]
              }
            },
            {
              "id": "csharp/CommandInjection",
              "name": "CommandInjection",
              "shortDescription": {
                "text": "Command Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "CommandInjection",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-78"
                ]
              }
            },
            {
              "id": "csharp/Deserialization",
              "name": "Deserialization",
              "shortDescription": {
                "text": "Deserialization of Untrusted Data"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "Deserialization",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-502"
                ]
              }
            },
            {
              "id": "csharp/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n## Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "InsecureHash",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-916"
                ]
              }
            },
            {
              "id": "csharp/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ducmeit1/cqrswithmediatr/commit/0ff34c9bb48fa6d78480bc1aaac5191dc9b0ad89?diff=split#diff-e8fe1aa8b56ef98985ac0b67457136088a81661516ece9e8bf50c53652e10a48L-1",
                    "lines": [
                      {
                        "line": "            return Create();\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            return Create(Directory.GetCurrentDirectory(),\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "                Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\"));\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "        protected abstract TContext CreateNewInstance(DbContextOptions<TContext> options);\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private TContext Create()\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        private TContext Create(string basePath, string env)\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Create(\"Data Source=localhost;Initial Catalog=CustomerDB;User Id=sa;Password=Demo123456@;\");\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            var builder = new ConfigurationBuilder()\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .SetBasePath(basePath)\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .AddJsonFile(\"appsettings.json\", false, true)\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .AddJsonFile($\"appsettings.{env}.json\", true)\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .AddEnvironmentVariables();\n",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var config = builder.Build();\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var connectionString = config.GetConnectionString(\"DefaultConnection\");\n",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "            if (string.IsNullOrWhiteSpace(connectionString))\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new InvalidOperationException(\"Could not found a connection string named 'DefaultConnection'\");\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "            return Create(connectionString);\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/commit/5e1fd9a3fec72d1c5be5ef755ab85e4a7995fdad?diff=split#diff-ee1d7028115222ab8ec5180870b721958c715ab7697f52198ddfa41b1fae126eL-1",
                    "lines": [
                      {
                        "line": "optionsBuilder.UseSqlServer(\"Server=.;Database=SimpleBulks;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true\");\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "optionsBuilder.UseSqlServer(_connectionString);\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/daxnet/apworks-core/commit/e4b3878f13ba608f61ff2683d9beb28d93a7a311?diff=split#diff-b100b4e4198f2f5a04a8b80cef17e326cc6de0452f4801147878ee2c1669d89fL-1",
                    "lines": [
                      {
                        "line": "        public const string ConnectionString = \"Server=localhost;Database=SQLServerEventStoreTest;User Id=sa;Password=G1veMeP@ss\";\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        public const string ConnectionStringWithoutDatabase = \"Server=localhost;User Id=sa;Password=G1veMeP@ss\";\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        public static readonly string ConnectionString = $@\"Server=localhost\\sqlexpress;Database={EventStoreDatabaseName};Integrated Security=SSPI;\";\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "        public const string ConnectionStringWithoutDatabase = @\"Server=localhost\\sqlexpress;Integrated Security=SSPI;\";\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "        private static readonly string MDF_FileName = Path.Combine(Path.GetTempPath(), EventStoreDatabaseName + \".mdf\");\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "        private static readonly string LDF_FileName = Path.Combine(Path.GetTempPath(), EventStoreDatabaseName + \".ldf\");\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 42,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "csharp/Sqli",
              "name": "Sqli",
              "shortDescription": {
                "text": "SQL Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n## Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "Sqli",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/seven1986/oauthapp/commit/?diff=split#diff-8e9dd0a263393e21c4673b05d0c73204e4c76c89a6135c06eb5b99dce59cbc25L-1",
                    "lines": [
                      {
                        "line": "                            {\n",
                        "lineNumber": 227,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                var sql = string.Format(\"DELETE IdentityClaims WHERE ID IN ({0})\",\n",
                        "lineNumber": 228,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                            string.Join(\",\", DeleteEntities));\n",
                        "lineNumber": 229,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 230,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                db.Database.ExecuteSqlCommand(new RawSqlString(sql));\n",
                        "lineNumber": 231,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                            {db.Database.ExecuteSqlCommand(\n",
                        "lineNumber": 227,
                        "lineChange": "added"
                      },
                      {
                        "line": "                                new RawSqlString(\"UPDATE IdentityClaims SET [Type]=@Type WHERE Id = @Id\"),\n",
                        "lineNumber": 228,
                        "lineChange": "added"
                      },
                      {
                        "line": "                                new SqlParameter(\"@Type\", x.Type),\n",
                        "lineNumber": 229,
                        "lineChange": "added"
                      },
                      {
                        "line": "                                new SqlParameter(\"@Id\", x.Id)\n",
                        "lineNumber": 230,
                        "lineChange": "added"
                      },
                      {
                        "line": "                            );\n",
                        "lineNumber": 231,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/seven1986/oauthapp/commit/?diff=split#diff-93580e462d7475669e474609b2c62674f341184a1361fb761fdf63f01e47d5edL-1",
                    "lines": [
                      {
                        "line": "new RawSqlString(\"UPDATE AspNetUserFile SET [FileType]=@FileType,[Files]=@Files WHERE Id = \" + x.Id),\n",
                        "lineNumber": 390,
                        "lineChange": "removed"
                      },
                      {
                        "line": "new RawSqlString(\"UPDATE AspNetUserFile SET [FileType]=@FileType,[Files]=@Files WHERE Id = @Id\"),\n",
                        "lineNumber": 390,
                        "lineChange": "added"
                      },
                      {
                        "line": "new SqlParameter(\"@Id\",x.Id),\n",
                        "lineNumber": 391,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/seven1986/oauthapp/commit/?diff=split#diff-93580e462d7475669e474609b2c62674f341184a1361fb761fdf63f01e47d5edL-1",
                    "lines": [
                      {
                        "line": "var sql = $\"DELETE AspNetUserRoles WHERE UserId = {source.Id}\";\n",
                        "lineNumber": 418,
                        "lineChange": "removed"
                      },
                      {
                        "line": "db.Database.ExecuteSqlCommand(new RawSqlString(sql));\n",
                        "lineNumber": 419,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var userId = source.Id;\n",
                        "lineNumber": 418,
                        "lineChange": "added"
                      },
                      {
                        "line": "var sql = \"DELETE FROM AspNetUserRoles WHERE UserId = @UserId\";\n",
                        "lineNumber": 419,
                        "lineChange": "added"
                      },
                      {
                        "line": "db.Database.ExecuteSqlCommand(sql, new SqlParameter(\"@UserId\", userId));\n",
                        "lineNumber": 420,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 1,
                "cwe": [
                  "CWE-89"
                ]
              }
            },
            {
              "id": "csharp/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "XSS",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-79"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "csharp/AntiforgeryTokenDisabled",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "This ASP.NET MVC action should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "markdown": "This {0} should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "arguments": [
              "[ASP.NET MVC action](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/AuthController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 19,
                  "endColumn": 24
                }
              }
            }
          ],
          "fingerprints": {
            "0": "075d18de49951d2fd0c2221a1545fb7044b53bdf6e9f2eddb259f7eb3b1d416d",
            "1": "c90cb73f.39b8d118.6247e451.b0b315d9.e836d8d2.369dfe5f.f021a8a1.0de99891.c90cb73f.39b8d118.6247e451.de031890.e836d8d2.7e8ec1cc.f021a8a1.0de99891"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/AuthController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 19,
                            "endColumn": 24
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "csharp/AntiforgeryTokenDisabled",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "This ASP.NET MVC action should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "markdown": "This {0} should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "arguments": [
              "[ASP.NET MVC action](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/CommentController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8,
                  "endLine": 8,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d9cef7197c5fa21f469fc1df5af7a377167a3f6da30dee0f49b4ac61e5e491e5",
            "1": "b47c3cd0.2d88ec9f.e5e8747a.3da791a1.63feb440.c2d766a4.ce0185b2.151c1bd0.c44d6ed0.2d88ec9f.95605a73.3da791a1.63feb440.7e8ec1cc.ce0185b2.151c1bd0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/CommentController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "csharp/AntiforgeryTokenDisabled",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "This ASP.NET MVC action should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "markdown": "This {0} should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "arguments": [
              "[ASP.NET MVC action](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/DeserializeController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 19,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7a279f748c338d60a3152bdd37b96ca52dc1cace92142c76e3cda47bb2aa5f39",
            "1": "b47c3cd0.69639c37.1ef07073.f6a9db24.63feb440.257c5aa5.ce0185b2.151c1bd0.c44d6ed0.69639c37.95605a73.f6a9db24.63feb440.7e8ec1cc.ce0185b2.151c1bd0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 19,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 428,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "csharp/BinaryFormatterUsage",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "The BinaryFormatter class was found to be in use. As per Microsoft recommendations, BinaryFormatter serialization is obsolete and should not be used",
            "markdown": "The BinaryFormatter class was found to be in use. As per Microsoft recommendations, BinaryFormatter serialization is obsolete and should not be used",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/DeserializeController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 23,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7e15ca593de1d27bb96423eb1a0d40e160a0cd437064bc003a3353a28759e96d",
            "1": "f4a90fce.8c06c0b2.68418e3d.f5757239.bb824921.7e971bc1.96127c42.d6b8d71a.f4a90fce.8c06c0b2.68418e3d.f5757239.bb824921.7e971bc1.ce0185b2.d6b8d71a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 23,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 210,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/CommandInjection",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into the arguments of a System.Diagnostics.ProcessStartInfo object, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[the arguments of a System.Diagnostics.ProcessStartInfo object](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/UtilityController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 9,
                  "endColumn": 53
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ef0278dd7c3c3d2ef82f29d4470f90e175ccb986677a4fc409867893c4569438",
            "1": "24540ad6.69639c37.68418e3d.3da791a1.43ad2118.42b6f87b.ce0185b2.a71aff07.96f36779.8c06c0b2.2cf7101d.b0b315d9.63feb440.7e8ec1cc.ce0185b2.7d7ec2d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UtilityController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 24,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UtilityController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 24,
                            "endColumn": 35
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UtilityController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 47,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UtilityController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 46,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UtilityController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 36,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UtilityController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 9,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UtilityController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 9,
                            "endColumn": 53
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 560,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/Deserialization",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into Deserialize, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to deserialize an object. This may result in an Unsafe Deserialization vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6)",
              "[Deserialize](7)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/DeserializeController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 23,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cb4311888db8dfdd0ad46bc36937a42c023d4fa6dac049765665915f88f799e6",
            "1": "f4a90fce.8c06c0b2.68418e3d.f5757239.bb824921.7e971bc1.96127c42.d6b8d71a.f4a90fce.8c06c0b2.68418e3d.f5757239.63feb440.7e8ec1cc.ce0185b2.7d7ec2d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 42,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 25,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 12,
                            "endLine": 12,
                            "startColumn": 20,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 45,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 23,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/DeserializeController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 23,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 610,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/InsecureHash",
          "ruleIndex": 4,
          "level": "note",
          "message": {
            "text": "The MD5 hash (used by global::System.Security.Cryptography.MD5.Create) is insecure. Consider changing it to a secure hash algorithm.",
            "markdown": "The MD5 hash (used by {0}) is insecure. Consider changing it to a secure hash algorithm.",
            "arguments": [
              "[global::System.Security.Cryptography.MD5.Create](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/AuthController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 26,
                  "endColumn": 36
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a6a45785558ebb05d13746f1bd49e9193c8ecb6d0898cc2a5d7eaef6255fba0",
            "1": "ad94c995.8c06c0b2.06373764.b0b315d9.1ebf615a.7e971bc1.d81f8bf2.aee5d829.ad94c995.8c06c0b2.06373764.b0b315d9.1ebf615a.7e971bc1.d81f8bf2.aee5d829"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/AuthController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 25,
                            "endLine": 25,
                            "startColumn": 26,
                            "endColumn": 36
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 210,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in password variable declaration.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[password variable declaration](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/AuthController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 20,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e97b5195c14c1234ed16839445c48ffba62e821b5d00ab4e107f36d5aaa6207d",
            "1": "b47c3cd0.39b8d118.6247e451.de031890.63feb440.ce109560.f021a8a1.0de99891.b47c3cd0.39b8d118.6247e451.de031890.63feb440.ce109560.f021a8a1.0de99891"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/AuthController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 40,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/AuthController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 20,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 5,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in secret key variable declaration.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[secret key variable declaration](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/AuthController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "endLine": 23,
                  "startColumn": 13,
                  "endColumn": 32
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d35dd6d875efe3c2ada7767420b8d21da943d9b0e2b8682efe5324cad98854c5",
            "1": "96f36779.8c06c0b2.68418e3d.f5757239.1ebf615a.caefa017.ce0185b2.24b1e0e2.96f36779.8c06c0b2.68418e3d.f5757239.1ebf615a.caefa017.ce0185b2.24b1e0e2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/AuthController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 19,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/AuthController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 23,
                            "endLine": 23,
                            "startColumn": 13,
                            "endColumn": 32
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 419,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/Sqli",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into global::System.Data.SqlClient.SqlCommand, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[global::System.Data.SqlClient.SqlCommand](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/UserController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 19,
                  "endColumn": 93
                }
              }
            }
          ],
          "fingerprints": {
            "0": "588403cdb866b3b5daf79e3b2792e0f132a5c5d83f2dff07905835495fcc6b0b",
            "1": "c90cb73f.6df9ca4f.ca1c1d4e.f5757239.2db332b2.2f4e1548.b5c08ad5.57b45934.c90cb73f.8c06c0b2.68418e3d.f5757239.63feb440.7e8ec1cc.ce0185b2.bad79344"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 27,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 9,
                            "endLine": 9,
                            "startColumn": 27,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 75,
                            "endColumn": 83
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 74,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 34,
                            "endColumn": 86
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 19,
                            "endColumn": 93
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 760,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/XSS",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into an HTTP response via PostComment. This may result in an XSS vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into an HTTP response via {2}. This may result in an XSS vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[PostComment](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/CommentController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "endLine": 10,
                  "startColumn": 16,
                  "endColumn": 68
                }
              }
            }
          ],
          "fingerprints": {
            "0": "986874deb7e1b82f66d3de4c91c0b2ab8c673a966b9976e41493334733e3bb97",
            "1": "412e9d77.2d88ec9f.44bca5f3.3da791a1.b187fa56.c2d766a4.ce0185b2.c58ab509.c44d6ed0.2d88ec9f.95605a73.6483b32f.63feb440.7e8ec1cc.ce0185b2.7d7ec2d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/CommentController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 31,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/CommentController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8,
                            "endLine": 8,
                            "startColumn": 31,
                            "endColumn": 56
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/CommentController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 45,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/CommentController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 44,
                            "endColumn": 53
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/CommentController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 16,
                            "endColumn": 68
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/CommentController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 10,
                            "endLine": 10,
                            "startColumn": 16,
                            "endColumn": 68
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 610,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "C#",
            "files": 10,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 5,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}
