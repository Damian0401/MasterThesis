{
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SonarQube",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "informationUri": "http://localhost:5050/coding_rules",
          "rules": [
            {
              "id": "csharpsquid:S2068",
              "shortDescription": {
                "text": "Hard-coded credentials are security-sensitive"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "text": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\nstring username = \"admin\";\nstring password = GetEncryptedPassword();\nstring usernamePassword = string.Format(\"user={0}&amp;password={1}\", GetEncryptedUsername(), GetEncryptedPassword());\nstring url = $\"scheme://{username}:{password}@domain.com\";\n\nstring url2 = \"http://guest:guest@domain.com\"; // Compliant\nconst string Password_Property = \"custom.password\"; // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>"
              },
              "properties": {
                "tags": [
                  "cwe"
                ],
                "categories": [
                  "SECURITY_HOTSPOT"
                ]
              }
            },
            {
              "id": "csharpsquid:S2077",
              "shortDescription": {
                "text": "Formatting SQL queries is security-sensitive"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "text": "<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\">parameterized queries, prepared\n  statements, or stored procedures</a> and bind variables to SQL query parameters. </li>\n  <li> Consider using ORM frameworks if there is a need to have an abstract layer to access data. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\npublic void Foo(DbContext context, string query, string param)\n{\n    context.Database.ExecuteSqlCommand(\"SELECT * FROM mytable WHERE mycol=@p0\", param); // Compliant, it's a parametrized safe query\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/89\">CWE-89 - Improper Neutralization of Special Elements used in an SQL Command</a> </li>\n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>"
              },
              "properties": {
                "tags": [
                  "cwe",
                  "bad-practice",
                  "sql"
                ],
                "categories": [
                  "SECURITY_HOTSPOT"
                ]
              }
            },
            {
              "id": "csharpsquid:S4036",
              "shortDescription": {
                "text": "Searching OS commands in PATH is security-sensitive"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "text": "<h2>Recommended Secure Coding Practices</h2>\n<p>Fully qualified/absolute path should be used to specify the OS command to execute.</p>\n<h2>Compliant Solution</h2>\n<pre>\nProcess p = new Process();\np.StartInfo.FileName = @\"C:\\Apps\\binary.exe\"; // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/426\">CWE-426 - Untrusted Search Path</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/427\">CWE-427 - Uncontrolled Search Path Element</a> </li>\n</ul>"
              },
              "properties": {
                "tags": [
                  "cwe"
                ],
                "categories": [
                  "SECURITY_HOTSPOT"
                ]
              }
            },
            {
              "id": "csharpsquid:S4790",
              "shortDescription": {
                "text": "Using weak hashing algorithms is security-sensitive"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "text": "<h2>Recommended Secure Coding Practices</h2>\n<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> are recommended, and for password hashing, it’s even\nbetter to use algorithms that do not compute too \"quickly\", like <code>bcrypt</code>, <code>scrypt</code>, <code>argon2</code> or <code>pbkdf2</code>\nbecause it slows down <code>brute force attacks</code>.</p>\n<h2>Compliant Solution</h2>\n<pre>\nvar hashProvider1 = new SHA512Managed(); // Compliant\nvar hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName(\"SHA512Managed\"); // Compliant\nvar hashProvider3 = HashAlgorithm.Create(\"SHA512Managed\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1240\">CWE-1240 - Use of a Risky Cryptographic Primitive</a> </li>\n</ul>"
              },
              "properties": {
                "tags": [
                  "cwe"
                ],
                "categories": [
                  "SECURITY_HOTSPOT"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "csharpsquid:S2068",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "\"password\" detected here, make sure this is not a hard-coded credential."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/AuthController.cs",
                  "uriBaseId": "solutionDir"
                },
                "region": {
                  "startLine": 9,
                  "endLine": 9,
                  "startColumn": 19,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "csharpsquid:S2077",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Make sure using a dynamically formatted SQL query is safe here."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/UserController.cs",
                  "uriBaseId": "solutionDir"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 18,
                  "endColumn": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "csharpsquid:S4036",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Make sure the \"PATH\" used to find this command includes only what you intend."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/UtilityController.cs",
                  "uriBaseId": "solutionDir"
                },
                "region": {
                  "startLine": 12,
                  "endLine": 12,
                  "startColumn": 8,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "csharpsquid:S4790",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Make sure this weak hash algorithm is not used in a sensitive context here."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/AuthController.cs",
                  "uriBaseId": "solutionDir"
                },
                "region": {
                  "startLine": 25,
                  "endLine": 25,
                  "startColumn": 25,
                  "endColumn": 37
                }
              }
            }
          ]
        }
      ]
    }
  ]
}