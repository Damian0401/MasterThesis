{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "csharp/AntiforgeryTokenDisabled",
              "name": "AntiforgeryTokenDisabled",
              "shortDescription": {
                "text": "Anti-forgery token validation disabled"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "## Details\n\nCross-site request forgery is an attack in which a malicious third party takes advantage of a user's authenticated credentials (such as a browser cookie) to impersonate that trusted user and perform unauthorized actions. The web application server cannot tell the difference between legitimate and malicious requests. This type of attack generally begins by tricking the user with a social engineering attack, such as a link or popup that the user inadvertently clicks, causing an unauthorized request to be sent to the web server. Consequences vary: At a standard user level, attackers can change passwords, transfer funds, make purchases, or connect with contacts; from an administrator account, attackers can then make changes to or even take down the app itself.\n\nExample:\n\n```\npublic class StudentController\n{\n\t    [HttpPost()]\n        [IgnoreAntiforgeryToken(Order = 1000)]\n        public Task<object> SendForm()\n        {\n                ...\n        }\n}\n```\n\n\n## Best practices for prevention\n* In ASP.NET MVC controllers, enable anti-forgery token validation by adding the `[ValidateAntiForgeryToken]` attribute to all actions that change the state of the server.\n\n* Anti-forgery token validation is enabled by default in Razor Pages. This validation can be disabled either globally or on individual pages by using the  `[IgnoreAntiforgeryToken]`. Disabling this feature is not recommended and can allow for CSRF attacks on methods that might be performing sensitive user actions.\n\n\n## References\n* [Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-5.0)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "AntiforgeryTokenDisabled",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/Dynatrace/superdump/commit/cd5f0b7190d41aafc53f95974b63b5e2e99a1a26?diff=split#diff-be2476dfaf7611f947a0efff2eac019574e91edcaf691f35276d46ee11edac8cL-1",
                    "lines": [
                      {
                        "line": "\t[AutoValidateAntiforgeryToken]\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      },
                      {
                        "line": "\tpublic class LoginController : Controller {\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprivate readonly LdapAuthentcationService authentificationHelper;\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tprivate readonly ILogger logger;\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpublic LoginController(LdapAuthentcationService authentificationHelper, ILoggerFactory loggerFactory) {\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tthis.authentificationHelper = authentificationHelper;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tlogger = loggerFactory.CreateLogger<LoginController>();\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tpublic IActionResult Index() {\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\treturn View(\"Login\", new LoginViewModel { ReturnUrl = Request.Query[\"ReturnUrl\"].FirstOrDefault() ?? \"/Home/Index\" });\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t[HttpPost]\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/damienbod/AspNetCoreMvcAngular/commit/fba1c6dc595134bdefc9aa2ffb0764ee29d7f1be?diff=split#diff-c8f5e654c5707f3bb49bd646232b379408572dcd345d3929f595bc037bec7c28L-1",
                    "lines": [
                      {
                        "line": "[HttpPost]\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "[Route(\"\")]\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "//[ValidateAntiForgeryToken]\r\n",
                        "lineNumber": 13,
                        "lineChange": "removed"
                      },
                      {
                        "line": "[ValidateAntiForgeryToken]\r\n",
                        "lineNumber": 13,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/SOFTINUX/Base/commit/e1580f565b03b4e44bb2e7d1faeceec36e58fcfa?diff=split#diff-1e5a17815941ead6a9e0f7a3a453b32809e3dcafbfc055036a161f016cb01e45L-1",
                    "lines": [
                      {
                        "line": "[HttpPost]\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "//[ExportModelStateToTempData]\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "[AllowAnonymous]\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "[ValidateAntiForgeryToken]\n",
                        "lineNumber": 43,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 35,
                "cwe": [
                  "CWE-352"
                ]
              }
            },
            {
              "id": "csharp/InsecureCipher",
              "name": "InsecureCipher",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n## Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "InsecureCipher",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "csharp/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ducmeit1/cqrswithmediatr/commit/0ff34c9bb48fa6d78480bc1aaac5191dc9b0ad89?diff=split#diff-e8fe1aa8b56ef98985ac0b67457136088a81661516ece9e8bf50c53652e10a48L-1",
                    "lines": [
                      {
                        "line": "            return Create();\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            return Create(Directory.GetCurrentDirectory(),\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "                Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\"));\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "        protected abstract TContext CreateNewInstance(DbContextOptions<TContext> options);\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private TContext Create()\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        private TContext Create(string basePath, string env)\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Create(\"Data Source=localhost;Initial Catalog=CustomerDB;User Id=sa;Password=Demo123456@;\");\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            var builder = new ConfigurationBuilder()\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .SetBasePath(basePath)\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .AddJsonFile(\"appsettings.json\", false, true)\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .AddJsonFile($\"appsettings.{env}.json\", true)\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .AddEnvironmentVariables();\n",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var config = builder.Build();\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var connectionString = config.GetConnectionString(\"DefaultConnection\");\n",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "            if (string.IsNullOrWhiteSpace(connectionString))\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new InvalidOperationException(\"Could not found a connection string named 'DefaultConnection'\");\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "            return Create(connectionString);\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/commit/5e1fd9a3fec72d1c5be5ef755ab85e4a7995fdad?diff=split#diff-ee1d7028115222ab8ec5180870b721958c715ab7697f52198ddfa41b1fae126eL-1",
                    "lines": [
                      {
                        "line": "optionsBuilder.UseSqlServer(\"Server=.;Database=SimpleBulks;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true\");\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "optionsBuilder.UseSqlServer(_connectionString);\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/daxnet/apworks-core/commit/e4b3878f13ba608f61ff2683d9beb28d93a7a311?diff=split#diff-b100b4e4198f2f5a04a8b80cef17e326cc6de0452f4801147878ee2c1669d89fL-1",
                    "lines": [
                      {
                        "line": "        public const string ConnectionString = \"Server=localhost;Database=SQLServerEventStoreTest;User Id=sa;Password=G1veMeP@ss\";\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        public const string ConnectionStringWithoutDatabase = \"Server=localhost;User Id=sa;Password=G1veMeP@ss\";\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        public static readonly string ConnectionString = $@\"Server=localhost\\sqlexpress;Database={EventStoreDatabaseName};Integrated Security=SSPI;\";\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "        public const string ConnectionStringWithoutDatabase = @\"Server=localhost\\sqlexpress;Integrated Security=SSPI;\";\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "        private static readonly string MDF_FileName = Path.Combine(Path.GetTempPath(), EventStoreDatabaseName + \".mdf\");\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "        private static readonly string LDF_FileName = Path.Combine(Path.GetTempPath(), EventStoreDatabaseName + \".ldf\");\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 42,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "csharp/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "PT",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ODotNet/MStack.MainSite/commit/?diff=split#diff-b6e4f38f3a8264c106b67337855add037c38ea26c15e1a51afa7803e0856d08aL-1",
                    "lines": [
                      {
                        "line": "using System.Text.RegularExpressions;\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "namespace MStack.MainSite.Controllers\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public class ManageController : BaseController\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private MStackRepository<Guid> DataContext { get; set; }\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ManageController()\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "            DataContext = new MStackRepository<Guid>(NHSessionFactory.OpenSession());\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // GET: Manage\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Index()\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var userName = UserIdentity.Name;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var user = DataContext.GetQuery<User>().SingleOrDefault(x => x.UserName == userName);\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = user.Map<User, UserModel>();\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(model);\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult EditUser(Guid id)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var user = DataContext.GetQuery<User>().SingleOrDefault(x => x.Id == id);\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = user.Map<User, UserModel>();\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(model);\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult EditUser(UserModel model)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (ModelState.IsValid)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "                using (var tran = DataContext.Session.BeginTransaction())\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    var entity = DataContext.GetQuery<User>().SingleOrDefault(x => x.Id == model.Id);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    entity.DisplayName = model.DisplayName;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    //entity.Email = model.Email;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    entity.Avatar = model.Avatar;\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    if (!string.IsNullOrEmpty(model.AvatarState))\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    {\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        var tmpArray = model.AvatarState.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            .Select(x => Convert.ToInt32(x))\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            .ToArray();\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        if (tmpArray.Length == 4)\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            entity.Avatar = CropAvatar(model.Avatar, tmpArray[0], tmpArray[1], tmpArray[2], tmpArray[3]);\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    entity.Company = model.Company;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    DataContext.Update(entity);\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    tran.Commit();\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return RedirectToAction(\"Index\");\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"Error\");\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult UploadAvatar(string id)\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var files = Request.Files;\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (files.Count > 0)\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var imgFile = files[0];\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var ext = Path.GetExtension(imgFile.FileName);\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var dirName = \"/webupload/avatar/\";\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var savePath = dirName + string.Format(\"avatar_tmp_{0}{1}\", id, ext);\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                var safeId = Regex.Replace(id, \"[^a-zA-Z0-9-]\", \"\");\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "                var savePath = Path.Combine(dirName, string.Format(\"avatar_tmp_{0}{1}\", safeId, ext));\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "                var physicPath = Server.MapPath(savePath);\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "                FileUntils.CreateDirIfNotExists(Server.MapPath(dirName));\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "                imgFile.SaveAs(physicPath);\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tommcclean/PortalCMS/commit/?diff=split#diff-f4cb0431450a65ba5c8032fbc65fd6333cbe61236ea7509dfd2057768557fc6eL-1",
                    "lines": [
                      {
                        "line": "using System.Text.RegularExpressions;\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "namespace Portal.CMS.Web.Areas.Builder.Controllers\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    [AdminFilter]\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public class SectionController : Controller\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #region Dependencies\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageSectionService _pageSectionService;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageSectionTypeService _pageSectionTypeService;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IImageService _imageService;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IRoleService _roleService;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private const string IMAGE_DIRECTORY = \"/Areas/Admin/Content/Media/\";\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public SectionController(IPageSectionService pageSectionService, IPageSectionTypeService pageSectionTypeService, IImageService imageService, IRoleService roleService)\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService = pageSectionService;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionTypeService = pageSectionTypeService;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _imageService = imageService;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _roleService = roleService;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #endregion Dependencies\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Edit(int sectionId)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var pageSection = _pageSectionService.Get(sectionId);\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new EditViewModel\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageId = pageSection.PageId,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionId = sectionId,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "                MediaLibrary = new PaginationViewModel\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = _imageService.Get(),\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"BackgroundImageId\",\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"section\"\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "                },\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageSectionHeight = _pageSectionService.DetermineSectionHeight(sectionId),\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageSectionBackgroundStyle = _pageSectionService.DetermineBackgroundStyle(sectionId),\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "                BackgroundType = _pageSectionService.DetermineBackgroundType(sectionId),\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "                BackgroundColour = \"#ffffff\",\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "                RoleList = _roleService.Get(),\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SelectedRoleList = pageSection.PageSectionRoles.Select(x => x.Role.RoleName).ToList()\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Edit\", model);\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Edit(EditViewModel model)\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (\"upload\".Equals(model.BackgroundType, StringComparison.OrdinalIgnoreCase) && model.AttachedImage != null)\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var imageFilePath = SaveImage(model.AttachedImage);\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var uploadedImageId = _imageService.Create(imageFilePath, model.ImageCategory);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundType(model.SectionId, true);\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.Background(model.SectionId, uploadedImageId);\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundStyle(model.SectionId, model.PageSectionBackgroundStyle);\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            else if (\"colour\".Equals(model.BackgroundType, StringComparison.OrdinalIgnoreCase))\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundType(model.SectionId, false);\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (!string.IsNullOrWhiteSpace(model.BackgroundColour))\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    _pageSectionService.Background(model.SectionId, model.BackgroundColour);\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            else\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundType(model.SectionId, true);\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (model.BackgroundImageId > 0)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    _pageSectionService.Background(model.SectionId, model.BackgroundImageId);\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundStyle(model.SectionId, model.PageSectionBackgroundStyle);\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService.Height(model.SectionId, model.PageSectionHeight);\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService.Roles(model.SectionId, model.SelectedRoleList);\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Add(int pageId)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new AddViewModel\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageId = pageId,\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionTypeList = _pageSectionTypeService.Get()\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Add\", model);\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public JsonResult Add(int pageId, int pageSectionTypeId, string componentStamp)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var pageSectionId = _pageSectionService.Add(pageId, pageSectionTypeId, componentStamp);\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return new JsonResult { Data = pageSectionId };\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "            catch (Exception ex)\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = false, ex.InnerException.Message });\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Markup(int pageSectionId)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var pageSection = _pageSectionService.Get(pageSectionId);\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new MarkupViewModel\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageSectionId = pageSectionId,\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageSectionBody = pageSection.PageSectionBody\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Markup\", model);\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public JsonResult Markup(MarkupViewModel model)\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService.Markup(model.PageSectionId, model.PageSectionBody);\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Json(new { State = true, Markup = model.PageSectionBody });\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Delete(int pageSectionId)\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.Delete(pageSectionId);\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = true });\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "            catch (Exception ex)\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = false, ex.InnerException.Message });\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private string SaveImage(HttpPostedFileBase imageFile)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var extension = Path.GetExtension(imageFile.FileName).ToUpper();\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (extension != \".PNG\" && extension != \".JPG\" && extension != \".GIF\")\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "                throw new ArgumentException(\"Unexpected Image Format Provided\");\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var destinationDirectory = Path.Combine(Server.MapPath(IMAGE_DIRECTORY));\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!Directory.Exists(destinationDirectory))\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Directory.CreateDirectory(destinationDirectory);\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var imageFileName = $\"media-{DateTime.Now.ToString(\"ddMMyyyyHHmmss\")}-{imageFile.FileName}\";\n",
                        "lineNumber": 181,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            var inputFileNameSanitized = Regex.Replace(imageFile.FileName, \"[^a-zA-Z0-9]\", \"\");\n",
                        "lineNumber": 182,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var imageFileName = $\"media-{DateTime.Now.ToString(\"ddMMyyyyHHmmss\")}-{inputFileNameSanitized}\";\n",
                        "lineNumber": 183,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var path = Path.Combine(Server.MapPath(IMAGE_DIRECTORY), imageFileName);\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "            imageFile.SaveAs(path);\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tommcclean/PortalCMS/commit/?diff=split#diff-6ee051a4e77d9278de0a6d23a38707410e1cd9323860fc1689f3841b8d5e7ab0L-1",
                    "lines": [
                      {
                        "line": "using System.Text.RegularExpressions;\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "namespace Portal.CMS.Web.Areas.Builder.Controllers\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    [AdminFilter]\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public class ComponentController : Controller\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #region Dependencies\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageSectionService _pageSectionService;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageComponentTypeService _pageComponentTypeService;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageComponentService _pageComponentService;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IImageService _imageService;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private const string IMAGE_DIRECTORY = \"/Areas/Admin/Content/Media/\";\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ComponentController(IPageSectionService pageSectionService, IPageComponentTypeService pageComponentTypeService, IPageComponentService pageComponentService, IImageService imageService)\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService = pageSectionService;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentTypeService = pageComponentTypeService;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService = pageComponentService;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _imageService = imageService;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #endregion Dependencies\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Add()\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new AddViewModel\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageComponentTypeList = _pageComponentTypeService.Get()\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Add\", model);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public JsonResult Add(int pageSectionId, string containerElementId, string elementBody)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elementBody = elementBody.Replace(\"animated bounce\", string.Empty);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentTypeService.Add(pageSectionId, containerElementId, elementBody);\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Json(new { State = true });\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Delete(int pageSectionId, string elementId)\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageComponentService.Delete(pageSectionId, elementId);\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = true });\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "            catch (Exception ex)\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = false, Message = ex.InnerException });\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Edit(int pageSectionId, string elementId, string elementHtml)\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService.Element(pageSectionId, elementId, elementHtml);\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Link(int pageSectionId, string elementId, string elementHtml, string elementHref, string elementTarget)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService.Anchor(pageSectionId, elementId, elementHtml, elementHref, elementTarget);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Image(int pageSectionId, string elementId, string elementType)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var pageSection = _pageSectionService.Get(pageSectionId);\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var imageList = _imageService.Get();\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new ImageViewModel\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageId = pageSection.PageId,\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionId = pageSectionId,\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ElementType = elementType,\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ElementId = elementId,\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "                GeneralImages = new PaginationViewModel\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"general\",\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"SelectedImageId\",\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = imageList.Where(x => x.ImageCategory == Entities.Entities.Generic.ImageCategory.General)\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "                },\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IconImages = new PaginationViewModel\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"icon\",\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"SelectedImageId\",\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = imageList.Where(x => x.ImageCategory == Entities.Entities.Generic.ImageCategory.Icon)\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "                },\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ScreenshotImages = new PaginationViewModel\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"screenshot\",\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"SelectedImageId\",\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = imageList.Where(x => x.ImageCategory == Entities.Entities.Generic.ImageCategory.Screenshot)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "                },\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "                TextureImages = new PaginationViewModel\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"texture\",\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"SelectedImageId\",\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = imageList.Where(x => x.ImageCategory == Entities.Entities.Generic.ImageCategory.Texture)\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Image\", model);\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Image(ImageViewModel model)\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var selectedImageId = model.SelectedImageId;\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (model.AttachedImage != null)\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var imageFilePath = SaveImage(model.AttachedImage);\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "                selectedImageId = _imageService.Create(imageFilePath, model.ImageCategory);\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService.EditImage(model.SectionId, model.ElementType, model.ElementId, selectedImageId);\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Video(int pageSectionId, string widgetWrapperElementId, string videoPlayerElementId)\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new VideoViewModel\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionId = pageSectionId,\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "                WidgetWrapperElementId = widgetWrapperElementId,\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "                VideoPlayerElementId = videoPlayerElementId,\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "                VideoUrl = string.Empty\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Video\", model);\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Video(VideoViewModel model)\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageComponentService.UpdateSourcePath(model.SectionId, model.VideoPlayerElementId, model.VideoUrl);\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = true });\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "            catch (Exception ex)\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = false });\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Freestyle(int pageSectionId, string elementId, string elementHtml)\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // REPLACE: MCE Tokens\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elementHtml = elementHtml.Replace(\"ui-draggable ui-draggable-handle mce-content-body\", string.Empty);\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elementHtml = elementHtml.Replace(\"contenteditable=\\\"true\\\" spellcheck=\\\"false\\\"\", string.Empty);\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService.Element(pageSectionId, elementId, elementHtml);\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Container(int pageSectionId, string elementId)\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new ContainerViewModel\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionId = pageSectionId,\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ElementId = elementId\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Container\", model);\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private string SaveImage(HttpPostedFileBase imageFile)\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var extension = Path.GetExtension(imageFile.FileName).ToUpper();\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (extension != \".PNG\" && extension != \".JPG\" && extension != \".GIF\")\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "                throw new ArgumentException(\"Unexpected Image Format Provided\");\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var destinationDirectory = Path.Combine(Server.MapPath(IMAGE_DIRECTORY));\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!Directory.Exists(destinationDirectory))\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Directory.CreateDirectory(destinationDirectory);\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var imageFileName = $\"media-{DateTime.Now.ToString(\"ddMMyyyyHHmmss\")}-{imageFile.FileName}\";\n",
                        "lineNumber": 216,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            var inputFileNameSanitized = Regex.Replace(imageFile.FileName, \"[^a-zA-Z0-9]\", \"\");\n",
                        "lineNumber": 217,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var imageFileName = $\"media-{DateTime.Now.ToString(\"ddMMyyyyHHmmss\")}-{inputFileNameSanitized}\";\n",
                        "lineNumber": 218,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var path = Path.Combine(Server.MapPath(IMAGE_DIRECTORY), imageFileName);\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "            imageFile.SaveAs(path);\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 4,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "csharp/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "XSS",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-79"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "csharp/AntiforgeryTokenDisabled",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "This ASP.NET MVC action should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "markdown": "This {0} should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "arguments": [
              "[ASP.NET MVC action](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/MusicController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 26,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "24ab1fa79bb04350740d97791ff57d5b1d82b9715979ebe0975b4b299cb5e51a",
            "1": "ae78f746.89f45d9f.527a2ee1.81b11b25.5ef47ab9.c3f64521.a69097a2.8b872c79.ae78f746.89f45d9f.00b6abb1.81b11b25.1168b837.c220cf1f.a69097a2.8b872c79"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/MusicController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 26,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "csharp/AntiforgeryTokenDisabled",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "This ASP.NET MVC action should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "markdown": "This {0} should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "arguments": [
              "[ASP.NET MVC action](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/MusicController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "endLine": 30,
                  "startColumn": 26,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "15862e464ff53c7226336d2b7e68ddbe8f191ae9356ff9dc624c273036f0d5ba",
            "1": "b01b06c1.89f45d9f.527a2ee1.116a5a58.5ef47ab9.399e1864.ce0185b2.8b872c79.c44d6ed0.89f45d9f.00b6abb1.de031890.1168b837.d88955d3.ce0185b2.8b872c79"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/MusicController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 30,
                            "endLine": 30,
                            "startColumn": 26,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "csharp/AntiforgeryTokenDisabled",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "This ASP.NET MVC action should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "markdown": "This {0} should use an anti-forgery validation attribute. Not using this attribute disables Cross Site Request Forgery (CSRF) protection and allows CSRF attacks.",
            "arguments": [
              "[ASP.NET MVC action](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/UserController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "startColumn": 26,
                  "endColumn": 31
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7f375bad26a156d3434cbbb8e7a12dcc5d075798a1755e0af5d12fb2db0d72dc",
            "1": "c90cb73f.69639c37.527a2ee1.116a5a58.2194b6f4.369dfe5f.ce0185b2.8b872c79.c90cb73f.69639c37.527a2ee1.de031890.2194b6f4.c220cf1f.ce0185b2.8b872c79"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 18,
                            "endLine": 18,
                            "startColumn": 26,
                            "endColumn": 31
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 443,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": true
          }
        },
        {
          "ruleId": "csharp/InsecureCipher",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "The DES cipher is insecure. Consider using AES instead.",
            "markdown": "The {0} cipher is insecure. Consider using AES instead.",
            "arguments": [
              "[DES](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Helpers/CryptoHelper.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11,
                  "endLine": 11,
                  "startColumn": 25,
                  "endColumn": 35
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e86932419507903aadc290769cb7ac522aed120f60d7a479402ad3729b9b522a",
            "1": "96f36779.8c06c0b2.68418e3d.1fcef13c.1ebf615a.7e971bc1.5f1fa597.84ef261a.96f36779.8c06c0b2.68418e3d.1fcef13c.1ebf615a.7e971bc1.5f1fa597.84ef261a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Helpers/CryptoHelper.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 25,
                            "endColumn": 35
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 2,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found username or password credential used in a condition.",
            "markdown": "Do not hardcode credentials in code. Found username or password credential used in a condition.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Services/UserService.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 35,
                  "endColumn": 52
                }
              }
            }
          ],
          "fingerprints": {
            "0": "a1f5c88b2e31e3a63f7aa655f1fb7ba905191bfd4f5c2041dd2e7377c62d2a67",
            "1": "995762fa.208f3e17.d0301c3c.4f39ca4a.5a7303e4.7690d71a.ce0185b2.25a36621.995762fa.208f3e17.d0301c3c.4f39ca4a.5a7303e4.148100f6.ce0185b2.25a36621"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Services/UserService.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 35,
                            "endColumn": 52
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 365,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileCodeFlow"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/PT",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into global::System.IO.FileStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[global::System.IO.FileStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/MusicController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 26,
                  "startColumn": 19,
                  "endColumn": 46
                }
              }
            }
          ],
          "fingerprints": {
            "0": "908d00ac4aa0340bd6f6e3f3fe4f18eac10f738426f5cecf799c674d23dfdbcb",
            "1": "00063abd.5894468a.91b97e27.f5757239.63feb440.2f4e1548.a69097a2.f302dac2.ae78f746.89f45d9f.00b6abb1.f5757239.1168b837.7e8ec1cc.a69097a2.7d7ec2d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/MusicController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/MusicController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 38,
                            "endColumn": 63
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/MusicController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 47,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Services/MusicService.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 33,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Services/MusicService.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 44,
                            "endColumn": 48
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Services/MusicService.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 44,
                            "endColumn": 57
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Services/MusicService.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 20,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Services/MusicService.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 43,
                            "endColumn": 47
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Services/MusicService.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 16,
                            "endLine": 16,
                            "startColumn": 28,
                            "endColumn": 65
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 815,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/XSS",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into an HTTP response via global::Microsoft.AspNetCore.Mvc.ControllerBase.Content. This may result in an XSS vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into an HTTP response via {2}. This may result in an XSS vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4)",
              "[global::Microsoft.AspNetCore.Mvc.ControllerBase.Content](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Controllers/UserController.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "endLine": 28,
                  "startColumn": 16,
                  "endColumn": 23
                }
              }
            }
          ],
          "fingerprints": {
            "0": "1e56590036278c311e8f5513700eec42c688b1ddaf1ef71127f55849a3a4d4d8",
            "1": "e21b96c9.25fa26f3.cec86057.f5757239.4a5c8084.2f4e1548.14474f59.09d05bb6.c44d6ed0.69639c37.527a2ee1.f5757239.2194b6f4.7e8ec1cc.ce0185b2.7d7ec2d8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 32,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 26,
                            "endLine": 26,
                            "startColumn": 32,
                            "endColumn": 43
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 40,
                            "endColumn": 44
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 39,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 24,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Controllers/UserController.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 28,
                            "endLine": 28,
                            "startColumn": 16,
                            "endColumn": 23
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 615,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "C#",
            "files": 10,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 5,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}
