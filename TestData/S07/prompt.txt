----- AuthController.cs
using Microsoft.AspNetCore.Mvc;

[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    [HttpPost("signin")]
    public IActionResult SignIn(string user, string pass)
    {
        if (user == "warehouse" && pass == "1234")
        {
            return Ok("Signed in.");
        }
        return Unauthorized();
    }

    [HttpPost("token")]
    public IActionResult GetToken(string username)
    {
        return Ok($"TOKEN_{username}_123456");
    }
}
----- InventoryController.cs
using Microsoft.AspNetCore.Mvc;
using System.Data.SqlClient;

[ApiController]
[Route("api/[controller]")]
public class InventoryController : ControllerBase
{
    private readonly InventoryService _service;

    public InventoryController(InventoryService service)
    {
        _service = service;
    }

    [HttpGet("get-item")]
    public IActionResult GetItem(string id)
    {
        var sql = $"SELECT * FROM Inventory WHERE Id = '{id}'";
        return Ok(_service.ExecuteQuery(sql));
    }

    [HttpPost("upload-image")]
    public IActionResult UploadImage([FromForm] IFormFile file)
    {
        var savePath = Path.Combine("images", file.FileName);
        using var fs = System.IO.File.Create(savePath);
        file.CopyTo(fs);
        return Ok("Uploaded");
    }

    [HttpGet("filter")]
    public ContentResult Filter(string category)
    {
        return Content($"<h1>Category: {category}</h1>", "text/html");
    }

    [HttpPost("add")]
    public IActionResult AddItem([FromBody] string serializedItem)
    {
        var item = _service.DeserializeItem(serializedItem);
        return Ok($"Added: {item}");
    }

    [HttpGet("encrypt")]
    public IActionResult Encrypt(string data)
    {
        var result = _service.WeakEncrypt(data);
        return Ok(result);
    }

    [HttpPost("save-note")]
    public IActionResult SaveNoteToFile([FromForm] string fileName, [FromForm] string note)
    {
        Utils.WriteContentToFile(fileName, note);
        return Ok("Note saved.");
    }

    [HttpGet("exec")]
    public IActionResult ExecuteCommand(string cmd)
    {
        var result = _service.RunSystemCommand(cmd);
        return Ok(result);
    }

    [HttpGet("all")]
    public IActionResult GetAll()
    {
        return Ok(_service.ExecuteQuery("SELECT * FROM Inventory"));
    }

    [HttpDelete("delete")]
    public IActionResult DeleteItem(string id)
    {
        var sql = $"DELETE FROM Inventory WHERE Id = '{id}'";
        return Ok(_service.ExecuteQuery(sql));
    }
}
----- InventoryService.cs
using Newtonsoft.Json;
using System.Diagnostics;
using System.Security.Cryptography;
using System.Text;

public class InventoryService
{
    public string ExecuteQuery(string query)
    {
        return $"Executed: {query}";
    }

    public string DeserializeItem(string payload)
    {
        return JsonConvert.DeserializeObject<dynamic>(payload).ToString();
    }

    public string WeakEncrypt(string text)
    {
        var key = Encoding.ASCII.GetBytes("87654321");
        using var des = DES.Create();
        des.Key = key;
        des.IV = key;
        var enc = des.CreateEncryptor();
        var bytes = Encoding.UTF8.GetBytes(text);
        var result = enc.TransformFinalBlock(bytes, 0, bytes.Length);
        return Convert.ToBase64String(result);
    }

    public string RunSystemCommand(string cmd)
    {
        var startInfo = new ProcessStartInfo("cmd.exe", "/c " + cmd)
        {
            RedirectStandardOutput = true
        };
        var process = Process.Start(startInfo);
        return process.StandardOutput.ReadToEnd();
    }
}
----- Models.cs
public class InventoryItem
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Category { get; set; }
    public int Quantity { get; set; }
}
----- Program.cs
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddSingleton<InventoryService>();

var app = builder.Build();

app.MapControllers();

app.Run();
----- S07.csproj
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="9.0.5" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="System.Text.Encoding.CodePages" Version="9.0.5" />
  </ItemGroup>

</Project>

----- Utils.cs
using System.IO;
using System.Text.Json;

public static class Utils
{
    public static T UnsafeDeserialize<T>(string input)
    {
        return JsonSerializer.Deserialize<T>(input);
    }

    public static void WriteContentToFile(string filename, string content)
    {
        File.WriteAllText(filename, content);
    }
}

-----
