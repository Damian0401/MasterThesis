{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "csharp/HardcodedSecret",
              "name": "HardcodedSecret",
              "shortDescription": {
                "text": "Hardcoded Secret"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "HardcodedSecret",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-547"
                ]
              }
            },
            {
              "id": "csharp/NoHardcodedCredentials",
              "name": "NoHardcodedCredentials",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n## Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "NoHardcodedCredentials",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ducmeit1/cqrswithmediatr/commit/0ff34c9bb48fa6d78480bc1aaac5191dc9b0ad89?diff=split#diff-e8fe1aa8b56ef98985ac0b67457136088a81661516ece9e8bf50c53652e10a48L-1",
                    "lines": [
                      {
                        "line": "            return Create();\n",
                        "lineNumber": 14,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            return Create(Directory.GetCurrentDirectory(),\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "                Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\"));\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "        protected abstract TContext CreateNewInstance(DbContextOptions<TContext> options);\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private TContext Create()\n",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        private TContext Create(string basePath, string env)\n",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Create(\"Data Source=localhost;Initial Catalog=CustomerDB;User Id=sa;Password=Demo123456@;\");\n",
                        "lineNumber": 21,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            var builder = new ConfigurationBuilder()\n",
                        "lineNumber": 22,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .SetBasePath(basePath)\n",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .AddJsonFile(\"appsettings.json\", false, true)\n",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .AddJsonFile($\"appsettings.{env}.json\", true)\n",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "                .AddEnvironmentVariables();\n",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var config = builder.Build();\n",
                        "lineNumber": 28,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var connectionString = config.GetConnectionString(\"DefaultConnection\");\n",
                        "lineNumber": 30,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 31,
                        "lineChange": "added"
                      },
                      {
                        "line": "            if (string.IsNullOrWhiteSpace(connectionString))\n",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "                throw new InvalidOperationException(\"Could not found a connection string named 'DefaultConnection'\");\n",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "added"
                      },
                      {
                        "line": "            return Create(connectionString);\n",
                        "lineNumber": 35,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/commit/5e1fd9a3fec72d1c5be5ef755ab85e4a7995fdad?diff=split#diff-ee1d7028115222ab8ec5180870b721958c715ab7697f52198ddfa41b1fae126eL-1",
                    "lines": [
                      {
                        "line": "optionsBuilder.UseSqlServer(\"Server=.;Database=SimpleBulks;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true\");\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "optionsBuilder.UseSqlServer(_connectionString);\n",
                        "lineNumber": 19,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/daxnet/apworks-core/commit/e4b3878f13ba608f61ff2683d9beb28d93a7a311?diff=split#diff-b100b4e4198f2f5a04a8b80cef17e326cc6de0452f4801147878ee2c1669d89fL-1",
                    "lines": [
                      {
                        "line": "        public const string ConnectionString = \"Server=localhost;Database=SQLServerEventStoreTest;User Id=sa;Password=G1veMeP@ss\";\n",
                        "lineNumber": 11,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        public const string ConnectionStringWithoutDatabase = \"Server=localhost;User Id=sa;Password=G1veMeP@ss\";\n",
                        "lineNumber": 12,
                        "lineChange": "removed"
                      },
                      {
                        "line": "        public static readonly string ConnectionString = $@\"Server=localhost\\sqlexpress;Database={EventStoreDatabaseName};Integrated Security=SSPI;\";\n",
                        "lineNumber": 14,
                        "lineChange": "added"
                      },
                      {
                        "line": "        public const string ConnectionStringWithoutDatabase = @\"Server=localhost\\sqlexpress;Integrated Security=SSPI;\";\n",
                        "lineNumber": 15,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 16,
                        "lineChange": "added"
                      },
                      {
                        "line": "        private static readonly string MDF_FileName = Path.Combine(Path.GetTempPath(), EventStoreDatabaseName + \".mdf\");\n",
                        "lineNumber": 17,
                        "lineChange": "added"
                      },
                      {
                        "line": "        private static readonly string LDF_FileName = Path.Combine(Path.GetTempPath(), EventStoreDatabaseName + \".ldf\");\n",
                        "lineNumber": 18,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 42,
                "cwe": [
                  "CWE-798"
                ]
              }
            },
            {
              "id": "csharp/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "PT",
                  "Security",
                  "SourceServer",
                  "SourceWebForm",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/ODotNet/MStack.MainSite/commit/?diff=split#diff-b6e4f38f3a8264c106b67337855add037c38ea26c15e1a51afa7803e0856d08aL-1",
                    "lines": [
                      {
                        "line": "using System.Text.RegularExpressions;\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "namespace MStack.MainSite.Controllers\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public class ManageController : BaseController\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private MStackRepository<Guid> DataContext { get; set; }\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ManageController()\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "            DataContext = new MStackRepository<Guid>(NHSessionFactory.OpenSession());\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "        // GET: Manage\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Index()\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var userName = UserIdentity.Name;\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var user = DataContext.GetQuery<User>().SingleOrDefault(x => x.UserName == userName);\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = user.Map<User, UserModel>();\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(model);\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult EditUser(Guid id)\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var user = DataContext.GetQuery<User>().SingleOrDefault(x => x.Id == id);\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = user.Map<User, UserModel>();\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(model);\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult EditUser(UserModel model)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (ModelState.IsValid)\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "                using (var tran = DataContext.Session.BeginTransaction())\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    var entity = DataContext.GetQuery<User>().SingleOrDefault(x => x.Id == model.Id);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    entity.DisplayName = model.DisplayName;\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    //entity.Email = model.Email;\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    entity.Avatar = model.Avatar;\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    if (!string.IsNullOrEmpty(model.AvatarState))\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    {\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        var tmpArray = model.AvatarState.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            .Select(x => Convert.ToInt32(x))\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            .ToArray();\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        if (tmpArray.Length == 4)\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        {\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "                            entity.Avatar = CropAvatar(model.Avatar, tmpArray[0], tmpArray[1], tmpArray[2], tmpArray[3]);\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "                        }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    }\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    entity.Company = model.Company;\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    DataContext.Update(entity);\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    tran.Commit();\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return RedirectToAction(\"Index\");\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"Error\");\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult UploadAvatar(string id)\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var files = Request.Files;\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (files.Count > 0)\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var imgFile = files[0];\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var ext = Path.GetExtension(imgFile.FileName);\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var dirName = \"/webupload/avatar/\";\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var savePath = dirName + string.Format(\"avatar_tmp_{0}{1}\", id, ext);\n",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                var safeId = Regex.Replace(id, \"[^a-zA-Z0-9-]\", \"\");\n",
                        "lineNumber": 75,
                        "lineChange": "added"
                      },
                      {
                        "line": "                var savePath = Path.Combine(dirName, string.Format(\"avatar_tmp_{0}{1}\", safeId, ext));\n",
                        "lineNumber": 76,
                        "lineChange": "added"
                      },
                      {
                        "line": "                var physicPath = Server.MapPath(savePath);\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "                FileUntils.CreateDirIfNotExists(Server.MapPath(dirName));\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "                imgFile.SaveAs(physicPath);\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tommcclean/PortalCMS/commit/?diff=split#diff-f4cb0431450a65ba5c8032fbc65fd6333cbe61236ea7509dfd2057768557fc6eL-1",
                    "lines": [
                      {
                        "line": "using System.Text.RegularExpressions;\n",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "namespace Portal.CMS.Web.Areas.Builder.Controllers\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    [AdminFilter]\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public class SectionController : Controller\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #region Dependencies\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageSectionService _pageSectionService;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageSectionTypeService _pageSectionTypeService;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IImageService _imageService;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IRoleService _roleService;\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private const string IMAGE_DIRECTORY = \"/Areas/Admin/Content/Media/\";\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public SectionController(IPageSectionService pageSectionService, IPageSectionTypeService pageSectionTypeService, IImageService imageService, IRoleService roleService)\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService = pageSectionService;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionTypeService = pageSectionTypeService;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _imageService = imageService;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _roleService = roleService;\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #endregion Dependencies\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Edit(int sectionId)\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var pageSection = _pageSectionService.Get(sectionId);\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new EditViewModel\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageId = pageSection.PageId,\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionId = sectionId,\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "                MediaLibrary = new PaginationViewModel\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = _imageService.Get(),\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"BackgroundImageId\",\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"section\"\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "                },\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageSectionHeight = _pageSectionService.DetermineSectionHeight(sectionId),\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageSectionBackgroundStyle = _pageSectionService.DetermineBackgroundStyle(sectionId),\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "                BackgroundType = _pageSectionService.DetermineBackgroundType(sectionId),\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "                BackgroundColour = \"#ffffff\",\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "                RoleList = _roleService.Get(),\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SelectedRoleList = pageSection.PageSectionRoles.Select(x => x.Role.RoleName).ToList()\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Edit\", model);\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Edit(EditViewModel model)\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (\"upload\".Equals(model.BackgroundType, StringComparison.OrdinalIgnoreCase) && model.AttachedImage != null)\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var imageFilePath = SaveImage(model.AttachedImage);\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var uploadedImageId = _imageService.Create(imageFilePath, model.ImageCategory);\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundType(model.SectionId, true);\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.Background(model.SectionId, uploadedImageId);\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundStyle(model.SectionId, model.PageSectionBackgroundStyle);\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            else if (\"colour\".Equals(model.BackgroundType, StringComparison.OrdinalIgnoreCase))\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundType(model.SectionId, false);\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (!string.IsNullOrWhiteSpace(model.BackgroundColour))\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    _pageSectionService.Background(model.SectionId, model.BackgroundColour);\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            else\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundType(model.SectionId, true);\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "                if (model.BackgroundImageId > 0)\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    _pageSectionService.Background(model.SectionId, model.BackgroundImageId);\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.SetBackgroundStyle(model.SectionId, model.PageSectionBackgroundStyle);\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService.Height(model.SectionId, model.PageSectionHeight);\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService.Roles(model.SectionId, model.SelectedRoleList);\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Add(int pageId)\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new AddViewModel\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageId = pageId,\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionTypeList = _pageSectionTypeService.Get()\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Add\", model);\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public JsonResult Add(int pageId, int pageSectionTypeId, string componentStamp)\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var pageSectionId = _pageSectionService.Add(pageId, pageSectionTypeId, componentStamp);\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return new JsonResult { Data = pageSectionId };\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "            catch (Exception ex)\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = false, ex.InnerException.Message });\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Markup(int pageSectionId)\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var pageSection = _pageSectionService.Get(pageSectionId);\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new MarkupViewModel\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageSectionId = pageSectionId,\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageSectionBody = pageSection.PageSectionBody\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Markup\", model);\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public JsonResult Markup(MarkupViewModel model)\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService.Markup(model.PageSectionId, model.PageSectionBody);\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Json(new { State = true, Markup = model.PageSectionBody });\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Delete(int pageSectionId)\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageSectionService.Delete(pageSectionId);\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = true });\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "            catch (Exception ex)\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = false, ex.InnerException.Message });\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private string SaveImage(HttpPostedFileBase imageFile)\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var extension = Path.GetExtension(imageFile.FileName).ToUpper();\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (extension != \".PNG\" && extension != \".JPG\" && extension != \".GIF\")\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "                throw new ArgumentException(\"Unexpected Image Format Provided\");\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var destinationDirectory = Path.Combine(Server.MapPath(IMAGE_DIRECTORY));\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!Directory.Exists(destinationDirectory))\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Directory.CreateDirectory(destinationDirectory);\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var imageFileName = $\"media-{DateTime.Now.ToString(\"ddMMyyyyHHmmss\")}-{imageFile.FileName}\";\n",
                        "lineNumber": 181,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            var inputFileNameSanitized = Regex.Replace(imageFile.FileName, \"[^a-zA-Z0-9]\", \"\");\n",
                        "lineNumber": 182,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var imageFileName = $\"media-{DateTime.Now.ToString(\"ddMMyyyyHHmmss\")}-{inputFileNameSanitized}\";\n",
                        "lineNumber": 183,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var path = Path.Combine(Server.MapPath(IMAGE_DIRECTORY), imageFileName);\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "            imageFile.SaveAs(path);\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/tommcclean/PortalCMS/commit/?diff=split#diff-6ee051a4e77d9278de0a6d23a38707410e1cd9323860fc1689f3841b8d5e7ab0L-1",
                    "lines": [
                      {
                        "line": "using System.Text.RegularExpressions;\n",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "namespace Portal.CMS.Web.Areas.Builder.Controllers\n",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "{\n",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "    [AdminFilter]\n",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "    public class ComponentController : Controller\n",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "    {\n",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #region Dependencies\n",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageSectionService _pageSectionService;\n",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageComponentTypeService _pageComponentTypeService;\n",
                        "lineNumber": 20,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IPageComponentService _pageComponentService;\n",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private readonly IImageService _imageService;\n",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private const string IMAGE_DIRECTORY = \"/Areas/Admin/Content/Media/\";\n",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ComponentController(IPageSectionService pageSectionService, IPageComponentTypeService pageComponentTypeService, IPageComponentService pageComponentService, IImageService imageService)\n",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageSectionService = pageSectionService;\n",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentTypeService = pageComponentTypeService;\n",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService = pageComponentService;\n",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _imageService = imageService;\n",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 32,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "        #endregion Dependencies\n",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 36,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Add()\n",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new AddViewModel\n",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageComponentTypeList = _pageComponentTypeService.Get()\n",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 42,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Add\", model);\n",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 47,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public JsonResult Add(int pageSectionId, string containerElementId, string elementBody)\n",
                        "lineNumber": 49,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 50,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elementBody = elementBody.Replace(\"animated bounce\", string.Empty);\n",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentTypeService.Add(pageSectionId, containerElementId, elementBody);\n",
                        "lineNumber": 53,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 54,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Json(new { State = true });\n",
                        "lineNumber": 55,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 58,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Delete(int pageSectionId, string elementId)\n",
                        "lineNumber": 59,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 60,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try\n",
                        "lineNumber": 61,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 62,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageComponentService.Delete(pageSectionId, elementId);\n",
                        "lineNumber": 63,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 64,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = true });\n",
                        "lineNumber": 65,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 66,
                        "lineChange": "none"
                      },
                      {
                        "line": "            catch (Exception ex)\n",
                        "lineNumber": 67,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = false, Message = ex.InnerException });\n",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 70,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 71,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 72,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 73,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 74,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Edit(int pageSectionId, string elementId, string elementHtml)\n",
                        "lineNumber": 75,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 76,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService.Element(pageSectionId, elementId, elementHtml);\n",
                        "lineNumber": 77,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 78,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 79,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 80,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 81,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 82,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 83,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Link(int pageSectionId, string elementId, string elementHtml, string elementHref, string elementTarget)\n",
                        "lineNumber": 84,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 85,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService.Anchor(pageSectionId, elementId, elementHtml, elementHref, elementTarget);\n",
                        "lineNumber": 86,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 87,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 88,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 89,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 90,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 91,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Image(int pageSectionId, string elementId, string elementType)\n",
                        "lineNumber": 92,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 93,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var pageSection = _pageSectionService.Get(pageSectionId);\n",
                        "lineNumber": 94,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 95,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var imageList = _imageService.Get();\n",
                        "lineNumber": 96,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 97,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new ImageViewModel\n",
                        "lineNumber": 98,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "                PageId = pageSection.PageId,\n",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionId = pageSectionId,\n",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ElementType = elementType,\n",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ElementId = elementId,\n",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "                GeneralImages = new PaginationViewModel\n",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"general\",\n",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"SelectedImageId\",\n",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = imageList.Where(x => x.ImageCategory == Entities.Entities.Generic.ImageCategory.General)\n",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "                },\n",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "                IconImages = new PaginationViewModel\n",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"icon\",\n",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"SelectedImageId\",\n",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = imageList.Where(x => x.ImageCategory == Entities.Entities.Generic.ImageCategory.Icon)\n",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "                },\n",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ScreenshotImages = new PaginationViewModel\n",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 117,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"screenshot\",\n",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"SelectedImageId\",\n",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = imageList.Where(x => x.ImageCategory == Entities.Entities.Generic.ImageCategory.Screenshot)\n",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "                },\n",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "                TextureImages = new PaginationViewModel\n",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "                {\n",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    PaginationType = \"texture\",\n",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    TargetInputField = \"SelectedImageId\",\n",
                        "lineNumber": 125,
                        "lineChange": "none"
                      },
                      {
                        "line": "                    ImageList = imageList.Where(x => x.ImageCategory == Entities.Entities.Generic.ImageCategory.Texture)\n",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "                }\n",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Image\", model);\n",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 133,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Image(ImageViewModel model)\n",
                        "lineNumber": 134,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 135,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var selectedImageId = model.SelectedImageId;\n",
                        "lineNumber": 136,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 137,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (model.AttachedImage != null)\n",
                        "lineNumber": 138,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 139,
                        "lineChange": "none"
                      },
                      {
                        "line": "                var imageFilePath = SaveImage(model.AttachedImage);\n",
                        "lineNumber": 140,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 141,
                        "lineChange": "none"
                      },
                      {
                        "line": "                selectedImageId = _imageService.Create(imageFilePath, model.ImageCategory);\n",
                        "lineNumber": 142,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 143,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 144,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService.EditImage(model.SectionId, model.ElementType, model.ElementId, selectedImageId);\n",
                        "lineNumber": 145,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 146,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 147,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 148,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 149,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 150,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Video(int pageSectionId, string widgetWrapperElementId, string videoPlayerElementId)\n",
                        "lineNumber": 151,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 152,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new VideoViewModel\n",
                        "lineNumber": 153,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 154,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionId = pageSectionId,\n",
                        "lineNumber": 155,
                        "lineChange": "none"
                      },
                      {
                        "line": "                WidgetWrapperElementId = widgetWrapperElementId,\n",
                        "lineNumber": 156,
                        "lineChange": "none"
                      },
                      {
                        "line": "                VideoPlayerElementId = videoPlayerElementId,\n",
                        "lineNumber": 157,
                        "lineChange": "none"
                      },
                      {
                        "line": "                VideoUrl = string.Empty\n",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 159,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Video\", model);\n",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 164,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateAntiForgeryToken]\n",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Video(VideoViewModel model)\n",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "            try\n",
                        "lineNumber": 168,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "                _pageComponentService.UpdateSourcePath(model.SectionId, model.VideoPlayerElementId, model.VideoUrl);\n",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = true });\n",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "            catch (Exception ex)\n",
                        "lineNumber": 174,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "                return Json(new { State = false });\n",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "            }\n",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpPost]\n",
                        "lineNumber": 180,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [ValidateInput(false)]\n",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Freestyle(int pageSectionId, string elementId, string elementHtml)\n",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "            // REPLACE: MCE Tokens\n",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elementHtml = elementHtml.Replace(\"ui-draggable ui-draggable-handle mce-content-body\", string.Empty);\n",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "            elementHtml = elementHtml.Replace(\"contenteditable=\\\"true\\\" spellcheck=\\\"false\\\"\", string.Empty);\n",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 187,
                        "lineChange": "none"
                      },
                      {
                        "line": "            _pageComponentService.Element(pageSectionId, elementId, elementHtml);\n",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return Content(\"Refresh\");\n",
                        "lineNumber": 190,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 191,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 192,
                        "lineChange": "none"
                      },
                      {
                        "line": "        [HttpGet]\n",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "        public ActionResult Container(int pageSectionId, string elementId)\n",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var model = new ContainerViewModel\n",
                        "lineNumber": 196,
                        "lineChange": "none"
                      },
                      {
                        "line": "            {\n",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "                SectionId = pageSectionId,\n",
                        "lineNumber": 198,
                        "lineChange": "none"
                      },
                      {
                        "line": "                ElementId = elementId\n",
                        "lineNumber": 199,
                        "lineChange": "none"
                      },
                      {
                        "line": "            };\n",
                        "lineNumber": 200,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 201,
                        "lineChange": "none"
                      },
                      {
                        "line": "            return View(\"_Container\", model);\n",
                        "lineNumber": 202,
                        "lineChange": "none"
                      },
                      {
                        "line": "        }\n",
                        "lineNumber": 203,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 204,
                        "lineChange": "none"
                      },
                      {
                        "line": "        private string SaveImage(HttpPostedFileBase imageFile)\n",
                        "lineNumber": 205,
                        "lineChange": "none"
                      },
                      {
                        "line": "        {\n",
                        "lineNumber": 206,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var extension = Path.GetExtension(imageFile.FileName).ToUpper();\n",
                        "lineNumber": 207,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 208,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (extension != \".PNG\" && extension != \".JPG\" && extension != \".GIF\")\n",
                        "lineNumber": 209,
                        "lineChange": "none"
                      },
                      {
                        "line": "                throw new ArgumentException(\"Unexpected Image Format Provided\");\n",
                        "lineNumber": 210,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 211,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var destinationDirectory = Path.Combine(Server.MapPath(IMAGE_DIRECTORY));\n",
                        "lineNumber": 212,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 213,
                        "lineChange": "none"
                      },
                      {
                        "line": "            if (!Directory.Exists(destinationDirectory))\n",
                        "lineNumber": 214,
                        "lineChange": "none"
                      },
                      {
                        "line": "                Directory.CreateDirectory(destinationDirectory);\n",
                        "lineNumber": 215,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 216,
                        "lineChange": "none"
                      },
                      {
                        "line": "            var imageFileName = $\"media-{DateTime.Now.ToString(\"ddMMyyyyHHmmss\")}-{imageFile.FileName}\";\n",
                        "lineNumber": 216,
                        "lineChange": "removed"
                      },
                      {
                        "line": "            var inputFileNameSanitized = Regex.Replace(imageFile.FileName, \"[^a-zA-Z0-9]\", \"\");\n",
                        "lineNumber": 217,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var imageFileName = $\"media-{DateTime.Now.ToString(\"ddMMyyyyHHmmss\")}-{inputFileNameSanitized}\";\n",
                        "lineNumber": 218,
                        "lineChange": "added"
                      },
                      {
                        "line": "            var path = Path.Combine(Server.MapPath(IMAGE_DIRECTORY), imageFileName);\n",
                        "lineNumber": 219,
                        "lineChange": "none"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 220,
                        "lineChange": "none"
                      },
                      {
                        "line": "            imageFile.SaveAs(path);\n",
                        "lineNumber": 221,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 4,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "csharp/Sqli",
              "name": "Sqli",
              "shortDescription": {
                "text": "SQL Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n## Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "Sqli",
                  "Security",
                  "SourceServer",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/seven1986/oauthapp/commit/?diff=split#diff-8e9dd0a263393e21c4673b05d0c73204e4c76c89a6135c06eb5b99dce59cbc25L-1",
                    "lines": [
                      {
                        "line": "                            {\n",
                        "lineNumber": 227,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                var sql = string.Format(\"DELETE IdentityClaims WHERE ID IN ({0})\",\n",
                        "lineNumber": 228,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                            string.Join(\",\", DeleteEntities));\n",
                        "lineNumber": 229,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\n",
                        "lineNumber": 230,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                                db.Database.ExecuteSqlCommand(new RawSqlString(sql));\n",
                        "lineNumber": 231,
                        "lineChange": "removed"
                      },
                      {
                        "line": "                            {db.Database.ExecuteSqlCommand(\n",
                        "lineNumber": 227,
                        "lineChange": "added"
                      },
                      {
                        "line": "                                new RawSqlString(\"UPDATE IdentityClaims SET [Type]=@Type WHERE Id = @Id\"),\n",
                        "lineNumber": 228,
                        "lineChange": "added"
                      },
                      {
                        "line": "                                new SqlParameter(\"@Type\", x.Type),\n",
                        "lineNumber": 229,
                        "lineChange": "added"
                      },
                      {
                        "line": "                                new SqlParameter(\"@Id\", x.Id)\n",
                        "lineNumber": 230,
                        "lineChange": "added"
                      },
                      {
                        "line": "                            );\n",
                        "lineNumber": 231,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/seven1986/oauthapp/commit/?diff=split#diff-93580e462d7475669e474609b2c62674f341184a1361fb761fdf63f01e47d5edL-1",
                    "lines": [
                      {
                        "line": "new RawSqlString(\"UPDATE AspNetUserFile SET [FileType]=@FileType,[Files]=@Files WHERE Id = \" + x.Id),\n",
                        "lineNumber": 390,
                        "lineChange": "removed"
                      },
                      {
                        "line": "new RawSqlString(\"UPDATE AspNetUserFile SET [FileType]=@FileType,[Files]=@Files WHERE Id = @Id\"),\n",
                        "lineNumber": 390,
                        "lineChange": "added"
                      },
                      {
                        "line": "new SqlParameter(\"@Id\",x.Id),\n",
                        "lineNumber": 391,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/seven1986/oauthapp/commit/?diff=split#diff-93580e462d7475669e474609b2c62674f341184a1361fb761fdf63f01e47d5edL-1",
                    "lines": [
                      {
                        "line": "var sql = $\"DELETE AspNetUserRoles WHERE UserId = {source.Id}\";\n",
                        "lineNumber": 418,
                        "lineChange": "removed"
                      },
                      {
                        "line": "db.Database.ExecuteSqlCommand(new RawSqlString(sql));\n",
                        "lineNumber": 419,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var userId = source.Id;\n",
                        "lineNumber": 418,
                        "lineChange": "added"
                      },
                      {
                        "line": "var sql = \"DELETE FROM AspNetUserRoles WHERE UserId = @UserId\";\n",
                        "lineNumber": 419,
                        "lineChange": "added"
                      },
                      {
                        "line": "db.Database.ExecuteSqlCommand(sql, new SqlParameter(\"@UserId\", userId));\n",
                        "lineNumber": 420,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 1,
                "cwe": [
                  "CWE-89"
                ]
              }
            },
            {
              "id": "csharp/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## Best practices for prevention\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "csharp",
                  "XSS",
                  "Security",
                  "SourceNonServer",
                  "SourceResourceAccess",
                  "SourceNetworkRequest",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-79"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "csharp/HardcodedSecret",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "A hardcoded string is used to encrypt data within global::Microsoft.IdentityModel.Tokens.SymmetricSecurityKey. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "markdown": "A {0} is used to encrypt data within {1}. Generate the value with a cryptographically strong random number generator and do not hardcode it in source code.",
            "arguments": [
              "[hardcoded string](0)",
              "[global::Microsoft.IdentityModel.Tokens.SymmetricSecurityKey](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "endLine": 97,
                  "startColumn": 19,
                  "endColumn": 81
                }
              }
            }
          ],
          "fingerprints": {
            "0": "66e50e3c4b4a6e8b6635129e1b3d96eda8290ffbcf169bd67850891842321d2c",
            "1": "96f36779.8c06c0b2.68418e3d.f5757239.1ebf615a.caefa017.57fc8460.24b1e0e2.96f36779.8c06c0b2.68418e3d.f5757239.1ebf615a.caefa017.57fc8460.24b1e0e2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 44,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 97,
                            "endLine": 97,
                            "startColumn": 19,
                            "endColumn": 81
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 610,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in a database connection string.",
            "markdown": "Do not hardcode credentials in code. Found hardcoded credential used in a database connection string.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "endLine": 14,
                  "startColumn": 21,
                  "endColumn": 95
                }
              }
            }
          ],
          "fingerprints": {
            "0": "58955340513fe65a607fe239061766af38449ee1805786643e4e076d901b0cc9",
            "1": "362bcd67.39b8d118.68418e3d.f5757239.86a851a1.9b468fa9.7ef81ea2.8767ee96.92b62c04.8c06c0b2.68418e3d.f5757239.1ebf615a.9b468fa9.7ef81ea2.bad79344"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 14,
                            "endLine": 14,
                            "startColumn": 21,
                            "endColumn": 95
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 430,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in secret key variable declaration.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[secret key variable declaration](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "endLine": 15,
                  "startColumn": 8,
                  "endColumn": 61
                }
              }
            }
          ],
          "fingerprints": {
            "0": "04e719c2a525b8d523280e6e1445abfe1e60aef28dfb4fd055e50ef89c6c10cd",
            "1": "0cf1008c.39b8d118.68418e3d.b0b315d9.43ad2118.b48c8c16.ce0185b2.a0da475d.0cf1008c.39b8d118.68418e3d.b0b315d9.43ad2118.b48c8c16.ce0185b2.a0da475d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 23,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 15,
                            "endLine": 15,
                            "startColumn": 8,
                            "endColumn": 61
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 430,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/NoHardcodedCredentials",
          "ruleIndex": 1,
          "level": "note",
          "message": {
            "text": "Do not hardcode credentials in code. Found hardcoded credential used in secret key variable declaration.",
            "markdown": "Do not hardcode credentials in code. Found {0} credential used in {1}.",
            "arguments": [
              "[hardcoded](0)",
              "[secret key variable declaration](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "endLine": 17,
                  "startColumn": 8,
                  "endColumn": 37
                }
              }
            }
          ],
          "fingerprints": {
            "0": "7945e4e1ad0e7236cdbdc1176a7dc7b0e16211fdb7075a398d6dfe974d823110",
            "1": "306e216d.39b8d118.68418e3d.f5757239.a758fffc.54396c6d.ce0185b2.a142f64d.306e216d.39b8d118.68418e3d.f5757239.a758fffc.54396c6d.ce0185b2.a142f64d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 23,
                            "endColumn": 37
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 17,
                            "endLine": 17,
                            "startColumn": 8,
                            "endColumn": 37
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 430,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/PT",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a web form flows into global::System.IO.FileStream, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7)",
              "[global::System.IO.FileStream](8)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 58,
                  "startColumn": 28,
                  "endColumn": 69
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9eaa3a018f32d7cd1e0b17082885dc3b8c2ec5a046d22fc9a88e2a044561139d",
            "1": "96f36779.8c06c0b2.68418e3d.f5757239.1ebf615a.7e971bc1.01f089bf.aee5d829.96f36779.8c06c0b2.d98c8c61.f5757239.1ebf615a.7de8f9ca.ce0185b2.b4988169"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 48,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 48,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 58,
                            "endLine": 58,
                            "startColumn": 28,
                            "endColumn": 69
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 810,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/Sqli",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into global::System.Data.SqlClient.SqlCommand, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[global::System.Data.SqlClient.SqlCommand](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 24,
                  "startColumn": 19,
                  "endColumn": 85
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ea129eff7cee0d3b68519b1af83b447d47c91ed59dd4f57d369c51504638266a",
            "1": "85739f8f.25fa26f3.ca1c1d4e.f5757239.4a5c8084.2f4e1548.b5c08ad5.e718bdf3.96f36779.8c06c0b2.68418e3d.f5757239.fcb647f9.0db8b5cd.ce0185b2.0a5e4cff"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 18,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 18,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 18,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 69,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 68,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 34,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 24,
                            "endLine": 24,
                            "startColumn": 19,
                            "endColumn": 85
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 820,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/Sqli",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into global::System.Data.SqlClient.SqlCommand, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[global::System.Data.SqlClient.SqlCommand](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "endLine": 83,
                  "startColumn": 19,
                  "endColumn": 85
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67145926862561c95ff31ca1b4350fbcb1419c85bfea738c2b39d943b9be0216",
            "1": "85739f8f.25fa26f3.ca1c1d4e.f5757239.4a5c8084.2f4e1548.b5c08ad5.e718bdf3.96f36779.8c06c0b2.68418e3d.f5757239.fcb647f9.0db8b5cd.ce0185b2.0a5e4cff"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 18,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 18,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 18,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 69,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 68,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 34,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 19,
                            "endColumn": 85
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 820,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/XSS",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Unsanitized input from data from a remote resource flows into an HTTP response via WriteAsync. This may result in an XSS vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into an HTTP response via {2}. This may result in an XSS vulnerability.",
            "arguments": [
              "[data from a remote resource](0)",
              "[flows](1),(2),(3)",
              "[WriteAsync](4)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 49,
                  "startColumn": 11,
                  "endColumn": 38
                }
              }
            }
          ],
          "fingerprints": {
            "0": "3cdf0b597e921d4677b9426d314b331974317227ab026a14a0ee31c0f4074ee5",
            "1": "96f36779.8c06c0b2.c9330245.f5757239.1ebf615a.7e971bc1.5f1fa597.aee5d829.e83d32b4.8c06c0b2.c9330245.f5757239.6b149ac3.0db8b5cd.ce0185b2.4bceeee7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 33,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 47,
                            "endLine": 47,
                            "startColumn": 33,
                            "endColumn": 67
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 39,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 49,
                            "endLine": 49,
                            "startColumn": 11,
                            "endColumn": 38
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 380,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/XSS",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a web form flows into an HTTP response via WriteAsync. This may result in an XSS vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into an HTTP response via {2}. This may result in an XSS vulnerability.",
            "arguments": [
              "[a web form](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[WriteAsync](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 60,
                  "startColumn": 15,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "e4e734645e2f62fd8e43524bd45952c2608bc28962d33cd47b846b10867eef6d",
            "1": "b08a1ac2.ea5caebd.a7eea1a7.f5757239.4a5c8084.2f4e1548.01f089bf.cde67692.96f36779.8c06c0b2.c9330245.f5757239.1ebf615a.7de8f9ca.ce0185b2.b4988169"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 42
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 54,
                            "endLine": 54,
                            "startColumn": 16,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 48,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 48,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 57,
                            "endLine": 57,
                            "startColumn": 24,
                            "endColumn": 36
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 76,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 43,
                            "endColumn": 84
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 60,
                            "endLine": 60,
                            "startColumn": 15,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 630,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        },
        {
          "ruleId": "csharp/XSS",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into an HTTP response via WriteAsync. This may result in an XSS vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into an HTTP response via {2}. This may result in an XSS vulnerability.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21)",
              "[WriteAsync](22)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Program.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 109,
                  "endLine": 109,
                  "startColumn": 15,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "8798d9bfe9c6e2afd67f2ec4ebdf28d8a0b9e408d4888d3e5fbee1f841669529",
            "1": "96f36779.8c06c0b2.68418e3d.f5757239.1ebf615a.7e971bc1.5f1fa597.aee5d829.115db858.8c06c0b2.c9330245.f5757239.556adb66.372d8ff1.ce0185b2.0a5e4cff"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 18,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 18,
                            "endColumn": 39
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 80,
                            "endLine": 80,
                            "startColumn": 18,
                            "endColumn": 45
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 69,
                            "endColumn": 75
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 68,
                            "endColumn": 76
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 34,
                            "endColumn": 78
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 83,
                            "endLine": 83,
                            "startColumn": 19,
                            "endColumn": 85
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 85,
                            "endLine": 85,
                            "startColumn": 24,
                            "endColumn": 50
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 52,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 10,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 89,
                            "endLine": 89,
                            "startColumn": 52,
                            "endColumn": 66
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 11,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 40,
                            "endColumn": 49
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 12,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 40,
                            "endColumn": 58
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 13,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 93,
                            "endLine": 93,
                            "startColumn": 13,
                            "endColumn": 61
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 14,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 92,
                            "endLine": 95,
                            "startColumn": 9,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 15,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 91,
                            "endLine": 95,
                            "startColumn": 22,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 16,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 21,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 17,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 103,
                            "endLine": 103,
                            "startColumn": 13,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 18,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 100,
                            "endLine": 106,
                            "startColumn": 21,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 19,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 60,
                            "endColumn": 65
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 20,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 108,
                            "endLine": 108,
                            "startColumn": 19,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 21,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 43,
                            "endColumn": 46
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 22,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Program.cs",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 109,
                            "endLine": 109,
                            "startColumn": 15,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 630,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              }
            ],
            "isAutofixable": false
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "C#",
            "files": 4,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 5,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}
